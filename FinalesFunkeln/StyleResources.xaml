<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Color x:Key="WindowBackgroundColor">#2D2D30</Color>
    
    <Color x:Key="ContextMenuBackgroundColor">#1B1B1C</Color>
    <Color x:Key="ContextMenuBorderColor">#333337</Color>
    
    <Color x:Key="AccentColor">#007ACC</Color>

    <Color x:Key="ButtonBackgroundColor">#2D2D30</Color>
    <Color x:Key="ButtonBackgroundHoverColor">#3E3E40</Color>
    
    <Color x:Key="InputBackgroundColor">#1E1E1E</Color>
    <Color x:Key="InputBorderColor">#282828</Color>
    <Color x:Key="InputCurrentLineBackgroundColor">#0F0F0F</Color>
    <Color x:Key="InputCurrentLineBorderColor">#282828</Color>

    <Color x:Key="ListBoxBackgroundColor">#252526</Color>
    <Color x:Key="ItemBackgroundColor">#252526</Color>
    <Color x:Key="ItemBackgroundSelectedInactiveColor">#3F3F46</Color>

    <Color x:Key="GridSplitterBackgroundColor">#2D2D30</Color>
    <Color x:Key="GridSplitterBorderColor">#3F3F46</Color>

    <Color x:Key="MenuBackgroundColor">#2D2D30</Color>
    <Color x:Key="MenuBackgroundHoverColor">#3E3E40</Color>
    <Color x:Key="MenuBackgroundPressedColor">#1B1B1C</Color>

    <Color x:Key="MenuItemBackgroundColor">#3E3E40</Color>
    <Color x:Key="MenuItemBackgroundHoverColor">#333334</Color>

    <Color x:Key="ScrollBarBackgroundColor">#3E3E42</Color>
    <Color x:Key="ScrollBarThumbColor">#686868</Color>
    <Color x:Key="ScrollBarThumbHoverColor">#9E9E9E</Color>
    <Color x:Key="ScrollBarThumbSelectedColor">#EFEBEF</Color>
    
    <Color x:Key="TextColor">#E6E6E6</Color>
    <Color x:Key="TextDisabledColor">#656565</Color>

    <SolidColorBrush x:Key="ButtonBackground" Color="{StaticResource ButtonBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonBackgroundHover" Color="{StaticResource ButtonBackgroundHoverColor}" />
    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="{StaticResource AccentColor}" />
    <SolidColorBrush x:Key="ButtonText" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ButtonTextHover" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ButtonTextPressed" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ButtonTextDisabled" Color="{StaticResource TextDisabledColor}" />

    <SolidColorBrush x:Key="InputBackground" Color="{StaticResource InputBackgroundColor}" />
    <SolidColorBrush x:Key="InputBackgroundCurrentLine" Color="{StaticResource InputCurrentLineBackgroundColor}" />
    <SolidColorBrush x:Key="InputBorderCurrentLine" Color="{StaticResource InputCurrentLineBorderColor}" />
    <SolidColorBrush x:Key="InputBorder" Color="{StaticResource InputBorderColor}" />
    <SolidColorBrush x:Key="InputText" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="InputTextHover" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="InputTextDisabled" Color="{StaticResource TextDisabledColor}" />

    <SolidColorBrush x:Key="ItemBackground" Color="{StaticResource ItemBackgroundColor}" />
    <SolidColorBrush x:Key="ItemBackgroundHover" Color="{StaticResource ItemBackgroundColor}" />
    <SolidColorBrush x:Key="ItemBackgroundSelected" Color="{StaticResource AccentColor}" />
    <SolidColorBrush x:Key="ItemBackgroundSelectedInactive" Color="{StaticResource ItemBackgroundSelectedInactiveColor}" />
    <SolidColorBrush x:Key="ItemText" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ItemTextSelected" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ItemTextHover" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="ItemTextDisabled" Color="{StaticResource TextDisabledColor}" />

    <SolidColorBrush x:Key="ContextMenuBackground" Color="{StaticResource ContextMenuBackgroundColor}" />
    <SolidColorBrush x:Key="ContextMenuBorder" Color="{StaticResource ContextMenuBorderColor}" />

    <SolidColorBrush x:Key="MenuBackground" Color="{StaticResource MenuBackgroundColor}" />
    <SolidColorBrush x:Key="MenuBackgroundHover" Color="{StaticResource MenuBackgroundHoverColor}" />
    <SolidColorBrush x:Key="MenuBackgroundPressed" Color="{StaticResource MenuBackgroundPressedColor}" />

    <SolidColorBrush x:Key="MenuItemBackgroundHover" Color="{StaticResource MenuItemBackgroundHoverColor}" />
    <SolidColorBrush x:Key="MenuItemText" Color="{StaticResource TextColor}" />
    <SolidColorBrush x:Key="MenuItemTextDisabled" Color="{StaticResource TextDisabledColor}" />

    <SolidColorBrush x:Key="ScrollBarBackground" Color="{StaticResource ScrollBarBackgroundColor}" />
    <SolidColorBrush x:Key="ScrollBarThumb" Color="{StaticResource ScrollBarThumbColor}" />
    <SolidColorBrush x:Key="ScrollBarThumbHover" Color="{StaticResource ScrollBarThumbHoverColor}" />
    <SolidColorBrush x:Key="ScrollBarThumbSelected" Color="{StaticResource ScrollBarThumbSelectedColor}" />

    <SolidColorBrush x:Key="GridSplitterBackground" Color="{StaticResource GridSplitterBackgroundColor}" />
    <SolidColorBrush x:Key="GridSplitterBorder" Color="{StaticResource GridSplitterBorderColor}" />

    <SolidColorBrush x:Key="WindowBackground" Color="{StaticResource WindowBackgroundColor}" />

    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource WindowBackground}"></Setter>
    </Style>
    
    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonText}"/>
        <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundHover}"/>
                <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderHover}"/>-->
                <Setter Property="Foreground" Value="{StaticResource ButtonTextHover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundPressed}"/>
                <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPressed}"/>-->
                <Setter Property="Foreground" Value="{StaticResource ButtonTextPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource ButtonTextDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonText}"/>
        <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundHover}"/>
                <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderHover}"/>-->
                <Setter Property="Foreground" Value="{StaticResource ButtonTextHover}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonBackgroundPressed}"/>
                <!--<Setter Property="BorderBrush" Value="{StaticResource ButtonBorderPressed}"/>-->
                <Setter Property="Foreground" Value="{StaticResource ButtonTextPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource ButtonTextDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource InputBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InputBorder}"/>
        <Setter Property="Foreground" Value="{StaticResource InputText}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource InputTextHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource InputTextDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type RichTextBox}">
        <Setter Property="Background" Value="{StaticResource InputBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InputBorder}"/>
        <Setter Property="Foreground" Value="{StaticResource InputText}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource InputTextHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource InputTextDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ItemBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource ItemText}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Background" Value="{StaticResource ItemBackground}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border Name="Border" SnapsToDevicePixels="true" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" >
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Foreground" Value="{StaticResource ItemTextHover}" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="{StaticResource ItemBackgroundSelected}" />
                                        <Setter Property="Foreground" Value="{StaticResource ItemTextSelected}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{StaticResource ItemTextDisabled}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource ItemText}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ItemText}"/>
    </Style>
    
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource ItemBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource ItemText}"/>
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                       Color="{StaticResource AccentColor}"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                       Color="{StaticResource TextColor}"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                       Color="{StaticResource ItemBackgroundSelectedInactiveColor}"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey }"
                       Color="{StaticResource TextColor}"/>
            
        </Style.Resources>
    </Style>
    <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{StaticResource ItemText}"/>
    </Style>
    
    <Style TargetType="GridSplitter">
        <Setter Property="Background" Value="{StaticResource GridSplitterBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource GridSplitterBorder}"/>
    </Style>
    <Style TargetType="ContextMenu">
        <Setter Property="Background" Value="{StaticResource ContextMenuBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource ContextMenuBorder}"/>
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" MinWidth="200">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource ContextMenuBackground}" BorderBrush="{StaticResource ContextMenuBorder}" BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuBackgroundHover}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource MenuItemTextDisabled}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.IsOpen" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuBackgroundPressed}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border"  MinHeight="22">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right"/>
                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource MenuItemText}" />
                <Popup Name="Popup" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" MinWidth="200">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{StaticResource ContextMenuBackground}" BorderBrush="{StaticResource ContextMenuBorder}" BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuItemBackgroundHover}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource MenuItemTextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate 
  x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
  TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <Border Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" Background="{StaticResource ContextMenuBackground}" BorderThickness="1" BorderBrush="{StaticResource ContextMenuBorder}">
                    <Path Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" Stroke="{StaticResource MenuItemText}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource MenuItemBackgroundHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource MenuItemTextDisabled}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="Menu">
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
    </Style>
    
    <Style TargetType="{x:Type Paragraph}">
        <Setter Property="Margin" Value="0"/>
    </Style>
    <!-- ScrollBars -->
    
    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border 
                          Background="{StaticResource ScrollBarThumb}" 
                          CornerRadius="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="{StaticResource ScrollBarBackground}">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Track Name="PART_Track" IsDirectionReversed="True" >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbStyle}" Margin="3">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="{StaticResource ScrollBarBackground}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <Track Name="PART_Track" IsDirectionReversed="False" >
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbStyle}" Margin="3">
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand"
                        Style="{StaticResource ScrollBarPageButtonStyle}">
                    </RepeatButton>
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="14"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="20"/>
                <Setter Property="Height" Value="14" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ScrollViewer}"
       TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                         Orientation="Vertical"
                         Grid.Column="1"
                         Value="{TemplateBinding VerticalOffset}"
                         Maximum="{TemplateBinding ScrollableHeight}"
                         ViewportSize="{TemplateBinding ViewportHeight}"
                         Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                         Orientation="Horizontal"
                         Grid.Row="1"
                         Value="{TemplateBinding HorizontalOffset}"
                         Maximum="{TemplateBinding ScrollableWidth}"
                         ViewportSize="{TemplateBinding ViewportWidth}"
                         Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>